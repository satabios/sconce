Metadata-Version: 2.1
Name: sconce
Version: 0.90
Summary: sconce: Compression and Deployment made Easy
Home-page: https://github.com/satabios/sconce
Author: Sathyaprakash Narayanan
Author-email: Sathyaprakash Narayanan <snaray17@ucsc.edu>
License: MIT License
Project-URL: code, https://github.com/satabios/sconce
Keywords: sconce
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
License-File: LICENSE.txt
Requires-Dist: alabaster==0.7.13
Requires-Dist: anyio==4.0.0
Requires-Dist: argon2-cffi==23.1.0
Requires-Dist: argon2-cffi-bindings==21.2.0
Requires-Dist: arrow==1.3.0
Requires-Dist: asttokens==2.4.1
Requires-Dist: async-lru==2.0.4
Requires-Dist: attrs==23.1.0
Requires-Dist: Babel==2.13.1
Requires-Dist: beautifulsoup4==4.12.2
Requires-Dist: black==23.11.0
Requires-Dist: bleach==6.1.0
Requires-Dist: certifi==2023.7.22
Requires-Dist: cffi==1.16.0
Requires-Dist: charset-normalizer==3.3.2
Requires-Dist: click==8.1.7
Requires-Dist: cmake==3.27.7
Requires-Dist: comm==0.2.0
Requires-Dist: contourpy==1.2.0
Requires-Dist: cycler==0.12.1
Requires-Dist: debugpy==1.8.0
Requires-Dist: decorator==5.1.1
Requires-Dist: defusedxml==0.7.1
Requires-Dist: docutils==0.18.1
Requires-Dist: exceptiongroup==1.1.3
Requires-Dist: executing==2.0.1
Requires-Dist: fast-pytorch-kmeans==0.2.0.1
Requires-Dist: fastjsonschema==2.19.0
Requires-Dist: filelock==3.13.1
Requires-Dist: flake8==6.1.0
Requires-Dist: fonttools==4.44.0
Requires-Dist: fqdn==1.5.1
Requires-Dist: fsspec==2023.10.0
Requires-Dist: h5py==3.10.0
Requires-Dist: huggingface-hub==0.17.3
Requires-Dist: idna==3.4
Requires-Dist: imagesize==1.4.1
Requires-Dist: iniconfig==2.0.0
Requires-Dist: ipdb==0.13.13
Requires-Dist: ipykernel==6.26.0
Requires-Dist: ipython==8.17.2
Requires-Dist: ipywidgets==8.1.1
Requires-Dist: isoduration==20.11.0
Requires-Dist: jedi==0.19.1
Requires-Dist: Jinja2==3.1.2
Requires-Dist: json5==0.9.14
Requires-Dist: jsonpointer==2.4
Requires-Dist: jsonschema==4.20.0
Requires-Dist: jsonschema-specifications==2023.11.1
Requires-Dist: jupyter==1.0.0
Requires-Dist: jupyter-console==6.6.3
Requires-Dist: jupyter-events==0.9.0
Requires-Dist: jupyter-lsp==2.2.0
Requires-Dist: jupyter_client==8.6.0
Requires-Dist: jupyter_core==5.5.0
Requires-Dist: jupyter_server==2.10.1
Requires-Dist: jupyter_server_terminals==0.4.4
Requires-Dist: jupyterlab==4.0.9
Requires-Dist: jupyterlab-pygments==0.2.2
Requires-Dist: jupyterlab-widgets==3.0.9
Requires-Dist: jupyterlab_server==2.25.2
Requires-Dist: kiwisolver==1.4.5
Requires-Dist: lit==17.0.4
Requires-Dist: MarkupSafe==2.1.3
Requires-Dist: matplotlib==3.8.1
Requires-Dist: matplotlib-inline==0.1.6
Requires-Dist: mccabe==0.7.0
Requires-Dist: mistune==3.0.2
Requires-Dist: mpmath==1.3.0
Requires-Dist: mypy-extensions==1.0.0
Requires-Dist: nbclient==0.9.0
Requires-Dist: nbconvert==7.11.0
Requires-Dist: nbformat==5.9.2
Requires-Dist: nest-asyncio==1.5.8
Requires-Dist: networkx==3.2.1
Requires-Dist: nir==0.2.0
Requires-Dist: nirtorch==0.2.1
Requires-Dist: notebook==7.0.6
Requires-Dist: notebook_shim==0.2.3
Requires-Dist: numpy==1.26.1
Requires-Dist: nvidia-cublas-cu12==12.1.3.1
Requires-Dist: nvidia-cuda-cupti-cu12==12.1.105
Requires-Dist: nvidia-cuda-nvrtc-cu12==12.1.105
Requires-Dist: nvidia-cuda-runtime-cu12==12.1.105
Requires-Dist: nvidia-cudnn-cu12==8.9.2.26
Requires-Dist: nvidia-cufft-cu12==11.0.2.54
Requires-Dist: nvidia-curand-cu12==10.3.2.106
Requires-Dist: nvidia-cusolver-cu12==11.4.5.107
Requires-Dist: nvidia-cusparse-cu12==12.1.0.106
Requires-Dist: nvidia-nccl-cu12==2.18.1
Requires-Dist: nvidia-nvjitlink-cu12==12.3.52
Requires-Dist: nvidia-nvtx-cu12==12.1.105
Requires-Dist: overrides==7.4.0
Requires-Dist: packaging==23.2
Requires-Dist: pandas==2.1.3
Requires-Dist: pandocfilters==1.5.0
Requires-Dist: parso==0.8.3
Requires-Dist: pathspec==0.11.2
Requires-Dist: pexpect==4.8.0
Requires-Dist: Pillow==10.1.0
Requires-Dist: platformdirs==4.0.0
Requires-Dist: pluggy==1.3.0
Requires-Dist: prometheus-client==0.18.0
Requires-Dist: prompt-toolkit==3.0.40
Requires-Dist: psutil==5.9.6
Requires-Dist: ptyprocess==0.7.0
Requires-Dist: pure-eval==0.2.2
Requires-Dist: pycodestyle==2.11.1
Requires-Dist: pycparser==2.21
Requires-Dist: pyflakes==3.1.0
Requires-Dist: Pygments==2.16.1
Requires-Dist: pynvml==11.5.0
Requires-Dist: pyparsing==3.1.1
Requires-Dist: pytest==7.4.3
Requires-Dist: python-dateutil==2.8.2
Requires-Dist: python-json-logger==2.0.7
Requires-Dist: pytz==2023.3.post1
Requires-Dist: PyYAML==6.0.1
Requires-Dist: pyzmq==25.1.1
Requires-Dist: qtconsole==5.5.1
Requires-Dist: QtPy==2.4.1
Requires-Dist: referencing==0.31.0
Requires-Dist: regex==2023.10.3
Requires-Dist: requests==2.31.0
Requires-Dist: rfc3339-validator==0.1.4
Requires-Dist: rfc3986-validator==0.1.1
Requires-Dist: rpds-py==0.13.0
Requires-Dist: safetensors==0.4.0
Requires-Dist: sconce
Requires-Dist: Send2Trash==1.8.2
Requires-Dist: six==1.16.0
Requires-Dist: sniffio==1.3.0
Requires-Dist: snntorch==0.7.0
Requires-Dist: snowballstemmer==2.2.0
Requires-Dist: soupsieve==2.5
Requires-Dist: Sphinx==7.2.6
Requires-Dist: sphinx-rtd-theme==1.3.0
Requires-Dist: sphinxcontrib-applehelp==1.0.7
Requires-Dist: sphinxcontrib-devhelp==1.0.5
Requires-Dist: sphinxcontrib-htmlhelp==2.0.4
Requires-Dist: sphinxcontrib-jquery==4.1
Requires-Dist: sphinxcontrib-jsmath==1.0.1
Requires-Dist: sphinxcontrib-qthelp==1.0.6
Requires-Dist: sphinxcontrib-serializinghtml==1.1.9
Requires-Dist: stack-data==0.6.3
Requires-Dist: sympy==1.12
Requires-Dist: terminado==0.18.0
Requires-Dist: tinycss2==1.2.1
Requires-Dist: tokenizers==0.14.1
Requires-Dist: tomli==2.0.1
Requires-Dist: torch==2.1.0
Requires-Dist: torchprofile==0.0.4
Requires-Dist: torchvision==0.16.0
Requires-Dist: tornado==6.3.3
Requires-Dist: tqdm==4.66.1
Requires-Dist: traitlets==5.13.0
Requires-Dist: transformers==4.35.0
Requires-Dist: triton==2.1.0
Requires-Dist: types-python-dateutil==2.8.19.14
Requires-Dist: typing_extensions==4.8.0
Requires-Dist: tzdata==2023.3
Requires-Dist: uri-template==1.3.0
Requires-Dist: urllib3==2.0.7
Requires-Dist: wcwidth==0.2.9
Requires-Dist: webcolors==1.13
Requires-Dist: webencodings==0.5.1
Requires-Dist: websocket-client==1.6.4
Requires-Dist: widgetsnbextension==4.0.9

================
Introduction
================

.. image:: https://readthedocs.org/projects/sconce/badge/?version=latest
        :target: https://sconce.readthedocs.io/en/latest/?badge=latest
        :alt: Documentation Status

.. image:: https://github.com/satabios/sconce/blob/main/docs/source/images/sconce-punch-bk_removed.png?raw=true
        :align: center
        :width: 400
        :height: 400

Advancement of deep learning has been largely driven by the availability of large datasets and the computational power to train large models.
The amount of complexity increases with each day passing and it is becoming increasingly difficult to train these models. Neverthless, infer 
the models efficiently on hardware.

However, the brain is able to learn from a few examples and is extremely energy efficient(Psst.. that too sparsely). Humans tend solve problems from their lens of perspective,
and thus we comprehend the universe through mathematical models. One such ideation is the concept of gradient descent or other optimization techniques
that we use to train our models. However, the brain does not use gradient descent to learn. It is still a mystery how the brain learns and how it is able to
solve complex problems with such ease.


.. image:: https://github.com/satabios/sconce/blob/main/docs/source/images/sconce-pipeline.png?raw=true
        :align: center
       


To bridge this gap, this package aids to perform a series of aids:

* Make **Training**, **Testing**, **Inference**, **Model Profiling**, etc.. pipelined. Thus easing your way through research and development.
* **Compress** the model through **Pruning**, **Optimal Brain Compression**, etc... This allows lesser usage of CPM(Computation, Power, Memory) and thus making it more efficient.
* **Quantize** the model to make it more efficient for hardware Deployment/Inferences.
* Leverage **Sparsity** in the model to make it more efficient for hardware Deployment/Inferences. 
* **Deployments** of the model on hardware.
* Support `Spiking Neural Networks(snnTorch) <https://github.com/jeshraghian/snntorch>`_ in this compression pipeline [Future integerations are expected].
* **Auto-Sensitivity Scan**: Each model would require a set of ingredients of its own to make it efficient. sconce enables an auto-search algorithm that picks the best possible solution from a corpus amount of possible techniques in the fastest manner possible with the least amount of human intervention.


If you like this project, please consider starring ‚≠ê this repo as it is the easiest and best way to support it.

Let us know if you are using sconce in any interesting work, research or blogs, as we would love to hear more about it! 
If you have issues, comments, or are looking for advice on training spiking neural networks, you can open an issue, a discussion, 
or chat in our `discord <https://discord.gg/GKwXMrZr>`_ channel.

sconce Structure
^^^^^^^^^^^^^^^^^^^^^^^^
sconce contains the following components: 

.. list-table::
   :widths: 20 60
   :header-rows: 1

   * - Component
     - Description
   * - `sconce.train <https://sconce.readthedocs.io/en/latest/usage.html#module-sconce>`_
     - a spiking neuron library like torch.nn, deeply integrated with autograd
   * - `sconce.measure_latency <https://sconce.readthedocs.io/en/latest/usage.html#module-sconce>`_
     - Compares the performance of two PyTorch models: an original dense model and a pruned and fine-tuned model. Prints a table of metrics including latency, MACs, and model size for both models and their reduction ratios.
   * - `sconce.prune_mode <https://sconce.readthedocs.io/en/latest/usage.html#module-sconce>`_
     - Currently supporting Gradual Magnitude Pruning(GMP), L1/L2 based Channel Wise Pruning(CWP), OBC, sparsegpt, etc...
   * - `sconce.quantize <https://sconce.readthedocs.io/en/latest/usage.html#module-sconce>`_
     - Quantize the computations of the model to make it more efficient for hardware Deployment/Inferences.
   * - `sconce.compress <https://sconce.readthedocs.io/en/latest/usage.html#module-sconcel>`_
     - Automated compression pipeline encompassing of Pruning, Quantization, and Sparsification.
  
**sconce** is designed to be intuitively used with PyTorch, compression for Linear, Convolutional and Attention blocks are supported.

At present, we are working on adding support for more compression techniques and more models.
The package envisions to be a one stop solution for all your compression needs and deployed on resource constrained devices.
Provided that the network models and tensors are loaded onto CUDA, sconce takes advantage of GPU acceleration in the same way as PyTorch. 

sconce is a work in progress, and we welcome contributions from the community.

Requirements 
^^^^^^^^^^^^^^^^^^^^^^^^
The following packages need to be installed to use sconce:

* torch >= 1.1.0
* numpy >= 1.17
* torchprofile
* matplotlib
* snntorch

They are automatically installed if sconce is installed using the pip command. Ensure the correct version of torch is installed for your system to enable CUDA compatibility. 

Installation
^^^^^^^^^^^^^^^^^^^^^^^^

Run the following to install:

.. code-block:: bash

  $ python
  $ pip install sconce

To install sconce from source instead::

  $ git clone https://github.com/satabios/sconce
  $ cd sconce
  $ python setup.py install
    

API & Examples 
^^^^^^^^^^^^^^^^^^^^^^^^
A complete API is available `here <https://sconce.readthedocs.io/>`_. Examples, tutorials and Colab notebooks are provided.


Quickstart 
^^^^^^^^^^^^^^^^^^^^^^^^

.. image:: https://colab.research.google.com/assets/colab-badge.svg
        :alt: Open In Colab
        :target: https://colab.research.google.com/github/satabios/sconce/blob/main/tutorials/Compression%20Pipeline.ipynb#


Here are a few ways you can get started with sconce:


* `Quickstart Notebook (Opens in Colab)`_

* `The API Reference`_ 

* `Tutorials`_

.. _Quickstart Notebook (Opens in Colab): https://colab.research.google.com/github/satabios/sconce/blob/main/tutorials/Compression%20Pipeline.ipynb
.. _The API Reference: https://sconce.readthedocs.io/
.. _Tutorials: https://sconce.readthedocs.io/en/latest/tutorials/index.html

Quickstart:
================


Define Network:
----------------------------


.. code:: python


   class Net(nn.Module):
       def __init__(self):
           super().__init__()
           self.conv1 = nn.Conv2d(3, 8, 3)
           self.bn1 = nn.BatchNorm2d(8)
           self.pool = nn.MaxPool2d(2, 2)
           self.conv2 = nn.Conv2d(8, 16, 3)
           self.bn2 = nn.BatchNorm2d(16)
           self.fc1 = nn.Linear(16*6*6, 32)
           self.fc2 = nn.Linear(32, 10)

       def forward(self, x):
           x = self.pool(self.bn1(F.relu(self.conv1(x))))
           x = self.pool(self.bn2(F.relu(self.conv2(x))))
           x = torch.flatten(x, 1)
           x = F.relu(self.fc1(x))
           x = self.fc2(x)
           return x

Make a Dict for Dataloader
--------------------------

.. code:: python

   image_size = 32
   transforms = {
       "train": Compose([
           RandomCrop(image_size, padding=4),
           RandomHorizontalFlip(),
           ToTensor(),
       ]),
       "test": ToTensor(),
   }
   dataset = {}
   for split in ["train", "test"]:
     dataset[split] = CIFAR10(
       root="data/cifar10",
       train=(split == "train"),
       download=True,
       transform=transforms[split],
     )
   dataloader = {}
   for split in ['train', 'test']:
     dataloader[split] = DataLoader(
       dataset[split],
       batch_size=512,
       shuffle=(split == 'train'),
       num_workers=0,
       pin_memory=True,
     )

Define your Configurations:
----------------------------

.. code:: python

   # Define all parameters 

   from sconce import sconce

   sconces = sconce()
   sconces.model= Net() # Model Definition
   sconces.criterion = nn.CrossEntropyLoss() # Loss
   sconces.optimizer= optim.Adam(sconces.model.parameters(), lr=1e-4)
   sconces.scheduler = optim.lr_scheduler.CosineAnnealingLR(sconces.optimizer, T_max=200)
   sconces.dataloader = dataloader
   sconces.epochs = 5 #Number of time we iterate over the data
   sconces.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
   sconces.experiment_name = "vgg-gmp" # Define your experiment name here
   sconces.prune_mode = "GMP" # Prune Mode: Currently supporting "GMP"(Supports Automated Pruning Ratio Detection), "CWP". Future supports for "OBC" and "sparseGPT"

One Roof Solution [Train -> Compress -> Deploy]:
------------------------------------------------

.. code:: python

   sconces.compress()


Contributing
^^^^^^^^^^^^^^^^^^^^^^^^

If you're ready to contribute to sconce, ping on `discord <https://discord.gg/GKwXMrZr>`_ channel.

Acknowledgments
^^^^^^^^^^^^^^^^^^^^^^^^

sconce is solely being maintained by `Sathyaprakash Narayanan <https://satabios.github.io/portfolio/>`_.

Special Thanks:

*  `Prof. and Mentor Jason K. Eshraghian <https://www.jasoneshraghian.com/>`_ and his pet `snnTorch <https://github.com/jeshraghian/snntorch/>`_ (extensively inspired from snnTorch to build and document sconce)
*  `Prof. Song Han <https://hanlab.mit.edu/>`_ for his coursework MIT6.5940 and many other projects like `torchsparse <https://github.com/mit-han-lab/torchsparse/>`_. 
*  `Neural Magic(Elias Frantar, Denis Kuznedelev, etc...) <https://github.com/neuralmagic/>`_ for `OBC <https://github.com/IST-DASLab/OBC/>`_ and `sparseGPT <https://github.com/IST-DASLab/sparsegpt/>`_.


License & Copyright
^^^^^^^^^^^^^^^^^^^^^^^^

sconce source code is published under the terms of the MIT License. 
sconce's documentation is licensed under a Creative Commons Attribution-Share Alike 3.0 Unported License (`CC BY-SA 3.0 <https://creativecommons.org/licenses/by-sa/3.0/>`_).
